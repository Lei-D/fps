% Generated by roxygen2 (4.0.1): do not edit by hand
\docType{package}
\name{fps}
\alias{fps}
\alias{fps-package}
\title{Fantope Projection and Selection}
\usage{
fps(S, ndim, lambda = as.numeric(c()), nsol = 50L, lambdamin = -1,
  maxnvar = -1L, maxiter = 100L, tolerance = 0.001, verbose = 0L)
}
\arguments{
\item{S}{Input matrix (assumed to be symmetric)}

\item{ndim}{Target subspace dimension (can be fractional)}

\item{nsol}{Number of solutions to compute}

\item{lambda}{Vector of regularization parameter values}

\item{lambdamin}{Minimum value of lambda (automatic if < 0)}

\item{maxnvar}{Suggested maximum number of variables to include
(ignored if <= 0)}

\item{maxiter}{Maximum number of iterations for each solution}

\item{tolerance}{Convergence threshold}

\item{verbose}{Level of verbosity (0 = silent, >0 = increasing
                      verbosity)}
}
\value{
Object of class 'fps'
}
\description{
This function computes a solution path of the Fantope Projection and
Selection (FPS) estimator.  It takes a symmetric matrix \code{S} as input
and returns an object containing a list of projection matrices
estimated by FPS over a sequence of regularization parameter values.

Fantope Project and Select
}
\details{
By default, a sensible minimum value of the regularization parameter
is automatically chosen so that the minimally regularized solution
is different from PCA.
}
\examples{
# Apply FPS to the standardized wine data from the UCI ML repository
data(wine)
out <- fps(cor(wine), ndim = 2)
print(out)
plot(out)

# Create a synthetic dataset by adding noise variables to the wine data
j <- sample(1:ncol(wine), size = 500 - ncol(wine), replace = TRUE)
noise <- apply(wine[, j], 2, sample, replace = TRUE)
colnames(noise) <- rep('noise', ncol(noise))
x <- cbind(wine, noise)
out <- fps(cor(x), ndim = 2, verbose = 1)

# Choose lambda by cross-validation (this may take a few minutes)
\dontrun{
cvout <- cv(out, x, FUN = cor, verbose = 1)
plot(cvout)
v <- coef(out, lambda = cvout$lambda.cv)
print(v)
}
}

